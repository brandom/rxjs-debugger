{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.constants.ts","webpack:///src/app/app.module.ts","webpack:///src/app/directives/fake.directive.ts","webpack:///src/app/pipes/fake.pipe.ts","webpack:///src/app/services/fake.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","fakeService","AvailableSource","fakePipe","fakeDirective","subscriptionFinisher$","consoleEntryPrefix","next","complete","pipe","subscribe","consoleLogger","transform","subscriptionsMap","source","COMPONENT","createFakeSubscription","PIPE","DIRECTIVE","SERVICE","openedSubscriptionsCount","cancelSubscriptions","console","nativeElement","innerHTML","entry","addSubscription","printSubscriptionsMap","printSubscriptionsCount","consoleClear","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","FakeDirective","FakePipe","value","name","FakeService","providedIn","environment","production","init","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { JsonPipe } from '@angular/common';\n\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RxJSMonitor } from 'rxjs-monitor';\n\nimport { FakePipe } from './pipes/fake.pipe';\nimport { FakeService } from './services/fake.service';\nimport { FakeDirective } from './directives/fake.directive';\nimport { AvailableSource } from './app.constants';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnDestroy {\n  AvailableSource = AvailableSource;\n\n  fakePipe: FakePipe = new FakePipe();\n  fakeDirective: FakeDirective = new FakeDirective();\n\n  @ViewChild('console') console: ElementRef;\n\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n  private readonly consoleEntryPrefix = '>>> ';\n\n  constructor(private fakeService: FakeService) { }\n\n  ngOnDestroy() {\n    this.subscriptionFinisher$.next();\n    this.subscriptionFinisher$.complete();\n  }\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  printSubscriptionsMap() {\n    this.consoleLogger('\\n' + new JsonPipe().transform(RxJSMonitor.subscriptionsMap()));\n  }\n\n  addSubscription(source: AvailableSource) {\n    switch(source) {\n      case AvailableSource.COMPONENT:\n        this.createFakeSubscription();\n        break;\n      case AvailableSource.PIPE:\n        this.fakePipe.createFakeSubscription();\n        break;\n      case AvailableSource.DIRECTIVE:\n        this.fakeDirective.createFakeSubscription();\n        break;\n      case AvailableSource.SERVICE:\n        this.fakeService.createFakeSubscription();\n        break;\n    }\n\n    this.consoleLogger(`New subscription was added to ${source}`);\n  }\n\n  printSubscriptionsCount() {\n    this.consoleLogger(`Subscription Count: ${RxJSMonitor.openedSubscriptionsCount()}`);\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n    this.fakePipe.cancelSubscriptions();\n    this.fakeDirective.cancelSubscriptions();\n    this.fakeService.cancelSubscriptions();\n\n    this.consoleLogger('Subscriptions canceled');\n  }\n\n  consoleClear() {\n    this.console.nativeElement.innerHTML = '';\n    this.consoleLogger('Console cleared but subscriptions keep alive!');\n  }\n\n  consoleLogger(entry: string) {\n    this.console.nativeElement.innerHTML += `<div>${this.consoleEntryPrefix}${entry}</div>`;\n  }\n}\n","<div class=\"main-container\">\n  <div class=\"btns-actions\">\n    <button\n      (click)=\"addSubscription(AvailableSource.COMPONENT)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Component\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.PIPE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Pipe\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.SERVICE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Service\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.DIRECTIVE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Directive\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"printSubscriptionsMap()\"\n    >\n      Show subscription map\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"printSubscriptionsCount()\"\n    >\n      Get subscriptions count\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"cancelSubscriptions()\"\n    >\n      Cancel Subscriptions\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"consoleClear()\"\n    >\n      Clear Console\n    </button>\n  </div>\n\n  <pre\n    #console\n    class=\"console\"\n  ></pre>\n</div>","export enum AvailableSource {\n  COMPONENT = 'Component',\n  SERVICE = 'Service',\n  PIPE = 'Pipe',\n  DIRECTIVE = 'Directive'\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FakePipe } from './pipes/fake.pipe';\nimport { FakeDirective } from './directives/fake.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FakePipe,\n    FakeDirective\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Directive } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appFakeDirective]'\n})\nexport class FakeDirective {\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Pipe({\n  name: 'fakePipe'\n})\nexport class FakePipe implements PipeTransform {\n\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeService {\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { RxJSMonitor } from 'rxjs-monitor';\nimport { Observable } from 'rxjs';\n\nRxJSMonitor.init(Observable);\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}