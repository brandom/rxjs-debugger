{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.constants.ts","webpack:///src/app/app.module.ts","webpack:///src/app/directives/fake.directive.ts","webpack:///src/app/pipes/fake.pipe.ts","webpack:///src/app/services/fake.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","fakeService","AvailableSource","fakePipe","fakeDirective","randomNumber","getRandomNumber","subscriptionFinisher$","consoleEntryPrefix","consoleLogger","valueChanges","subscribe","obSubscribed$","className","obUnsubscribed$","next","complete","pipe","source","COMPONENT","createFakeSubscription","PIPE","DIRECTIVE","SERVICE","addOnSubscribeLogic","console","log","addOnUnsubscribeLogic","clearOnSubscribeLogic","clearOnUnsubscribeLogic","transform","subscriptionsMap","openedSubscriptionsCount","cancelSubscriptions","nativeElement","innerHTML","Math","floor","random","entry","scroll","top","scrollHeight","addSubscription","addSubscriptionLogic","addUnsubscriptionLogic","clearSubscriptionLogic","clearUnsubscriptionLogic","printSubscriptionsMap","printSubscriptionsCount","consoleClear","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","FakeDirective","FakePipe","value","name","FakeService","providedIn","environment","production","init","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, ViewChild, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { JsonPipe } from '@angular/common';\n\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RxJSDebugger } from 'rxjs-debugger';\n\nimport { FakePipe } from './pipes/fake.pipe';\nimport { FakeService } from './services/fake.service';\nimport { FakeDirective } from './directives/fake.directive';\nimport { AvailableSource } from './app.constants';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements AfterViewInit, OnDestroy {\n  AvailableSource = AvailableSource;\n\n  fakePipe: FakePipe = new FakePipe();\n  fakeDirective: FakeDirective = new FakeDirective();\n\n  @ViewChild('console') console: ElementRef;\n\n  randomNumber: number = this.getRandomNumber();\n\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n  private readonly consoleEntryPrefix = '>>> ';\n\n  constructor(private fakeService: FakeService) { }\n\n  /**\n   * Adds initial message to console\n   *\n   * @memberof AppComponent\n   */\n  ngAfterViewInit() {\n    this.consoleLogger(\n      '<span style=\"color: green;\">\\n' +\n      '/*\\n' +\n      `Don't forget!\\n` +\n      'You can use <b>window.subscriptionsMap</b>\\n' +\n      `on browser's console to get subscriptions map\\n` +\n      `*/</span>`\n    )\n\n    RxJSDebugger.valueChanges\n      .subscribe(() => this.consoleLogger('Subscription map value changed!'));\n\n    RxJSDebugger.obSubscribed$\n      .subscribe(className => this.consoleLogger(`Observable subscribed on ${className}!`));\n\n    RxJSDebugger.obUnsubscribed$\n      .subscribe(className => this.consoleLogger(`Observable unsubscribed on ${className}!`));\n  }\n\n  ngOnDestroy() {\n    this.subscriptionFinisher$.next();\n    this.subscriptionFinisher$.complete();\n  }\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  addSubscription(source: AvailableSource) {\n    switch(source) {\n      case AvailableSource.COMPONENT:\n        this.createFakeSubscription();\n        break;\n      case AvailableSource.PIPE:\n        this.fakePipe.createFakeSubscription();\n        break;\n      case AvailableSource.DIRECTIVE:\n        this.fakeDirective.createFakeSubscription();\n        break;\n      case AvailableSource.SERVICE:\n        this.fakeService.createFakeSubscription();\n        break;\n    }\n  }\n\n  addSubscriptionLogic(randomNumber) {\n    RxJSDebugger.addOnSubscribeLogic(() => console.log(randomNumber));\n    this.randomNumber = this.getRandomNumber();\n  }\n\n  addUnsubscriptionLogic(randomNumber) {\n    RxJSDebugger.addOnUnsubscribeLogic(() => console.log(randomNumber));\n    this.randomNumber = this.getRandomNumber();\n  }\n\n  clearSubscriptionLogic() {\n    RxJSDebugger.clearOnSubscribeLogic();\n  }\n\n  clearUnsubscriptionLogic() {\n    RxJSDebugger.clearOnUnsubscribeLogic();\n  }\n\n  printSubscriptionsMap() {\n    this.consoleLogger('\\n' + new JsonPipe().transform(RxJSDebugger.subscriptionsMap()));\n  }\n\n  printSubscriptionsCount() {\n    this.consoleLogger(`Subscription Count: ${RxJSDebugger.openedSubscriptionsCount()}`);\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n    this.fakePipe.cancelSubscriptions();\n    this.fakeDirective.cancelSubscriptions();\n    this.fakeService.cancelSubscriptions();\n  }\n\n  consoleClear() {\n    this.console.nativeElement.innerHTML = '';\n    this.consoleLogger('Console cleared but subscriptions keep alive!');\n  }\n\n  private getRandomNumber() {\n    return Math.floor(Math.random() * 100);\n  }\n\n  private consoleLogger(entry: string) {\n    this.console.nativeElement.innerHTML +=\n      `<div><span style=\"color: green\">${this.consoleEntryPrefix}</span>${entry}</div>`;\n    this.console.nativeElement.scroll({\n      top: this.console.nativeElement.scrollHeight\n    });\n  }\n}\n","<div class=\"main-container\">\n  <div class=\"btns-actions\">\n\n    <!-- Add timers on fake classes -->\n    <button\n      (click)=\"addSubscription(AvailableSource.COMPONENT)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Component\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.PIPE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Pipe\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.SERVICE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Service\n    </button>\n\n    <button\n      (click)=\"addSubscription(AvailableSource.DIRECTIVE)\"\n      class=\"btns-actions__item btns-actions__item--primary\"\n    >\n      Create fake subscription on Directive\n    </button>\n\n    <!-- Change logic on subscribe and unsubscribe -->\n    <button\n      class=\"btns-actions__item btns-actions__item--other\"\n      (click)=\"addSubscriptionLogic(randomNumber)\"\n    >\n      console.log({{ randomNumber }}) on new subscription\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--other\"\n      (click)=\"addUnsubscriptionLogic(randomNumber)\"\n    >\n      console.log({{ randomNumber }}) on unsubscribe\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--other\"\n      (click)=\"clearSubscriptionLogic()\"\n    >\n      Clear extra subscription logic\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--other\"\n      (click)=\"clearUnsubscriptionLogic()\"\n    >\n      Clear extra unsubscription logic\n    </button>\n\n    <!-- Operations -->\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"printSubscriptionsMap()\"\n    >\n      Show subscription map\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"printSubscriptionsCount()\"\n    >\n      Get subscriptions count\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"cancelSubscriptions()\"\n    >\n      Cancel newly created subscriptions\n    </button>\n\n    <button\n      class=\"btns-actions__item btns-actions__item--secundary\"\n      (click)=\"consoleClear()\"\n    >\n      Clear Console\n    </button>\n  </div>\n\n  <pre\n    #console\n    class=\"console\"\n  ></pre>\n</div>","export enum AvailableSource {\n  COMPONENT = 'Component',\n  SERVICE = 'Service',\n  PIPE = 'Pipe',\n  DIRECTIVE = 'Directive'\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FakePipe } from './pipes/fake.pipe';\nimport { FakeDirective } from './directives/fake.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FakePipe,\n    FakeDirective\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Directive } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appFakeDirective]'\n})\nexport class FakeDirective {\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Pipe({\n  name: 'fakePipe'\n})\nexport class FakePipe implements PipeTransform {\n\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { timer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeService {\n  private readonly subscriptionFinisher$: Subject<void> = new Subject();\n\n  createFakeSubscription() {\n    timer(1000, 2000)\n      .pipe(takeUntil(this.subscriptionFinisher$))\n      .subscribe();\n  }\n\n  cancelSubscriptions() {\n    this.subscriptionFinisher$.next();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { RxJSDebugger } from 'rxjs-debugger';\nimport { Observable } from 'rxjs';\n\nif (environment.production) {\n  enableProdMode();\n} else {\n  RxJSDebugger.init(Observable);\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}